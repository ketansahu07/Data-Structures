#include<bits/stdc++.h>
using namespace std;
# define INF 0x3f3f3f3f

// iPair ==>  Integer Pair
typedef pair<int, int> iPair;

vector<string> city{"Delhi","Mumbai","Banglore","Manglore","Kolkata","Patna","Agra"};

// This class represents a directed graph using
// adjacency list representation
class Graph
{
    int V;    // No. of vertices

    // In a weighted graph, we need to store vertex
    // and weight pair for every edge
    list< pair<int, int> > *adj;

public:
    Graph(int V);  // Constructor

    // function to add an edge to graph
    void addEdge(int u, int v, int w);

    // prints shortest path from s
    void shortestPath(int s, int dest);

    void path(int a[], int s, int d);
};

// Allocates memory for adjacency list
Graph::Graph(int V)
{
    this->V = V;
    adj = new list<iPair> [V];
}

void Graph::addEdge(int u, int v, int w)
{
    adj[u].push_back(make_pair(v, w));
    adj[v].push_back(make_pair(u, w));
}

// Prints shortest paths from src to all other vertices
void Graph::shortestPath(int src, int dest)
{
    int parent[V];
    for(int i=0;i<V;i++)
        parent[i]=-1;

    priority_queue< iPair, vector <iPair> , greater<iPair> > pq;

    // Create a vector for distances and initialize all
    // distances as infinite (INF)
    vector<int> dist(V, INF);

    // Insert source itself in priority queue and initialize
    // its distance as 0.
    pq.push(make_pair(0, src));
    dist[src] = 0;

    /* Looping till priority queue becomes empty (or all
      distances are not finalized) */
    while (!pq.empty())
    {
        // The first vertex in pair is the minimum distance
        // vertex, extract it from priority queue.
        // vertex label is stored in second of pair (it
        // has to be done this way to keep the vertices
        // sorted distance (distance must be first item
        // in pair)
        int u = pq.top().second;
        pq.pop();

        // 'i' is used to get all adjacent vertices of a vertex
        list< pair<int, int> >::iterator i;
        for (i = adj[u].begin(); i != adj[u].end(); ++i)
        {
            // Get vertex label and weight of current adjacent
            // of u.
            int v = (*i).first;
            int weight = (*i).second;

            //  If there is shorted path to v through u.
            if (dist[v] > dist[u] + weight)
            {
                // Updating distance of v
                dist[v] = dist[u] + weight;
                parent[v]=u;
                pq.push(make_pair(dist[v], v));
            }
        }
    }

    // Print shortest distances stored in dist[]
    /**printf("Vertex   Distance from Source\n");
    for (int i = 0; i < V; ++i)
        printf("%d \t\t %d\n", i, dist[i]);
    **/

    cout<<"\nPrinting the path: \n\n";
    path(parent,src,dest);
}

//function to print the path from source to the destination
void Graph::path(int a[], int s, int v)
{
    if(s==v)
    cout<<city[s];
    else if(a[v]==-1)
        cout<<"No path from "<<s<<" to "<<v;
    else
    {
        path(a,s,a[v]);
        cout<<" -> "<<city[v];
    }
}

// Driver program to test methods of graph class
int main()
{
    // create the graph given in above fugure
    int V = 7;
    Graph g(V);

    //  making graph
    g.addEdge(0, 1, 4);
    g.addEdge(0, 5, 8);
    g.addEdge(1, 2, 8);
    g.addEdge(1, 5, 11);
    g.addEdge(2, 3, 7);
    g.addEdge(2, 6, 2);
    g.addEdge(3, 4, 9);
    g.addEdge(6, 4, 4);
    g.addEdge(0, 4, 7);
    g.addEdge(5, 6, 7);

    int s,d;
    cout<<"\nEnter the source vertex: ";
    cin>>s;
    cout<<"\nEnter the destination vertex: ";
    cin>>d;
    g.shortestPath(s,d);

    return 0;
}
