//https://practice.geeksforgeeks.org/problems/detect-cycle-in-an-undirected-graph/1/?track=SPC-Graph&batchId=154
//https://www.geeksforgeeks.org/detect-cycle-undirected-graph/

bool isCyclicUtil(vector<int> adj[],int v,bool visited[],int parent)
{
    visited[v] = true; 
  
    // Recur for all the vertices adjacent to this vertex 
    for (auto i = adj[v].begin(); i != adj[v].end(); ++i) 
    { 
        // If an adjacent is not visited, then recur for that adjacent 
        if (!visited[*i]) 
        { 
           if (isCyclicUtil(adj, *i, visited, v)) 
              return true; 
        } 
  
        // If an adjacent is visited and not parent of current vertex, 
        // then there is a cycle. 
        else if (*i != parent) 
           return true; 
    } 
    return false;
}

bool isCyclic(vector<int> adj[], int V)
{
   bool *visited = new bool[V]; 
    for (int i = 0; i < V; i++) 
        visited[i] = false; 
  
    // Call the recursive helper function to detect cycle in different 
    // DFS trees 
    for (int u = 0; u < V; u++) 
        if (!visited[u]) // Don't recur for u if it is already visited 
          if (isCyclicUtil(adj, u, visited, -1)) 
             return true; 
  
    return false;
}