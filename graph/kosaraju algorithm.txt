//https://practice.geeksforgeeks.org/problems/strongly-connected-components-kosarajus-algo/1/?track=SPC-GA&batchId=154

void fillOrder(vector<int> adj[], int V, int v, bool vis[], stack<int> &stk)
{
    vis[v] = true;
    // vector<int>::iterator i;
    for(int i=0;i<adj[v].size();i++)
    {
        if(!vis[adj[v][i]])
            fillOrder(adj, V, adj[v][i], vis, stk);
    }
    
    stk.push(v);
}

vector<int>* getTranspose(vector<int> adj[], int V)
{
    vector<int> *temp = new vector<int>[V];
    for(int i=0;i<V;i++)
    {
        // vector<int>::iterator j;
        for(int j=0;j<adj[i].size();j++)
        {
            temp[adj[i][j]].push_back(i);
        }
    }
    return temp;
}

void DFSUtil(int v, bool vis[], vector<int> adj[])
{
    vis[v]=true;
    // vector<int>::iterator i;
    for(int i=0;i<adj[v].size();i++)
        if(!vis[adj[v][i]])
            DFSUtil(adj[v][i], vis, adj);
}

int kosaraju(int V, vector<int> adj[])
{
    stack<int> stk;
    
    bool *vis  = new bool[V];
    for(int i=0;i<V;i++)
        vis[i] = false;
        
    for(int i=0;i<V;i++)
        if(vis[i]==false)
            fillOrder(adj, V, i, vis, stk);
            
    vector<int> *reverse_graph = getTranspose(adj, V);
    
    for(int i=0;i<V;i++)
        vis[i]=false;
        
    int res=0;
    while(!stk.empty())
    {
        int v = stk.top();
        stk.pop();
        if(vis[v]==false)
        {
            res+=1;
            DFSUtil(v, vis, reverse_graph);
        }
    }
    
    return res;
}