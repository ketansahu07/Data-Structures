//https://practice.geeksforgeeks.org/problems/hamiltonian-path/0/

#include <bits/stdc++.h>
using namespace std;

bool is_hamiltonianUtil(vector<int> adj[], int u, bool visited[], int n, int count_vertex)
{
    if(count_vertex==n)
        return true;
        
    visited[u] = 1;
    
    vector<int>::iterator v;
    for(v=adj[u].begin();v!=adj[u].end();v++)
    {
        if(visited[*v]==0)
        {
            if(is_hamiltonianUtil(adj, *v, visited, n, count_vertex+1))
                return true;
        }
    }
    
    visited[u] = 0;
    
    return false;
}

bool is_hamiltonian(vector<int> adj[], int n)
{
    bool visited[n+1];
    memset(visited, 0, sizeof(visited));
    for(int i=1;i<=n;i++)
        if(is_hamiltonianUtil(adj, i, visited, n, 1))
            return true;
    return false;
}

int main() {
	int t,n,m;
	int x,y;
	cin>>t;
	while(t--)
	{
	    cin>>n>>m;
	    vector<int> adj[n+1];
	    for(int i=0;i<m;i++)
	    {
	        cin>>x>>y;
	        adj[x].push_back(y);
	        adj[y].push_back(x);
	    }
	    
	    if(is_hamiltonian(adj, n))
	        cout<<1<<endl;
	    else
	        cout<<0<<endl;
	}
	return 0;
}