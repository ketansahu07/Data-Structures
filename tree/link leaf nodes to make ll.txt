#include<bits/stdc++.h>
using namespace std;
typedef struct Node* node;
struct Node{
    int data;
    node right;
    node left;
};

node new_node(int value)
{
    node temp;
    temp=(node)malloc(sizeof(struct Node));
    temp->data=value;
    temp->left=temp->right=NULL;
    return temp;
}

node insert(node nude,int value)
{
    if(nude==NULL)
        return nude=new_node(value);
    if(nude->data>value)
        nude->left=insert(nude->left,value);
    if(nude->data<value)
        nude->right=insert(nude->right,value);
    return nude;
}

void link_leaf(node root, node* head, node* prevleaf)
{
    if(root)
    {
        if(root->left==NULL && root->right==NULL)
        {
            if(*head==NULL)
                *head=root;
            else{
                if(*prevleaf)
                    (*prevleaf)->right=root;
            }
            *prevleaf=root;
        }
        else
        {
            link_leaf(root->left,head,prevleaf);
            link_leaf(root->right,head,prevleaf);
        }
    }
}

void preorder(node nude)
{
    if(nude)
    {
        cout<<nude->data<<" ";
        preorder(nude->left);
        preorder(nude->right);
    }
}

void printlist(node head)
{
    cout<<endl;
    node p=head;
    while(p!=NULL)
    {
        cout<<p->data<<" ";
        p=p->right;
    }
    cout<<endl;
}

int main()
{
    node root=NULL;
    for(int i=0;i<10;i++)
    {
        int val;
        cin>>val;
        if(i==0) root=insert(root,val);
        else
        insert(root,val);
    }
    preorder(root);
    node head=NULL;
    node prevleaf=NULL;
    link_leaf(root,&head,&prevleaf);
    printlist(head);
    return 0;
}