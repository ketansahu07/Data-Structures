#include<bits/stdc++.h>
using namespace std;

struct node{
    int data;
    node* left;
    node* right;
    node(int d)
    {
        data = d;
        left = right = NULL;
    }
};

node* insertNode(int data, node* root)
{
    if(!root) return new node(data);

    if(data<root->data)
        root->left = insertNode(data, root->left);
    else
        root->right = insertNode(data, root->right);
}

int searchh(int pr[],int s, int e, int key)
{
    for(int i=s;i<=e;i++)
    {
        if(pr[i]>key)
            return i;
    }
}

node* buildtree(int pr[],int *preindex, int key, int low, int high, int n)
{
    if(*preindex>=n)
        return NULL;
        
    node* root = NULL;

    if(key>low && key<high)
    {
        root = new node(key);
        *preindex = *preindex+1;

        if(*preindex<n)
        {
            root->left = buildtree(pr,preindex,pr[*preindex],low,key,n);
            root->right = buildtree(pr,preindex,pr[*preindex],key,high,n);
        }
    }
    return root;
}

void inorder(node* root)
{
    if(!root) return;
    inorder(root->left);
    cout<<root->data<<" ";
    inorder(root->right);
}

int main()
{
    int pr[] = {10,5,1,7,40,50};
    int n = sizeof(pr)/sizeof(pr[0]);
    int preindex = 0;
    node* root = buildtree(pr,&preindex,pr[0],INT_MIN,INT_MAX,n);
    inorder(root);
    return 0;
}
