//https://practice.geeksforgeeks.org/problems/range-lcm-queries/0/?track=PC-W9-ST&batchId=154

#include <bits/stdc++.h>
using namespace std;

int gcd(int a, int b)
{
    if(b==0)
        return a;
    return gcd(b, a%b);
}

int lcm(int a, int b)
{
    return (a*b)/gcd(a,b);
}

int getLCM(int *tree, int ss, int se, int si, int qs, int qe)
{
    if(qs>se || qe<ss)
        return 1;
    
    if(qs<=ss && qe>=se)
        return tree[si];
        
    int mid = (ss+se)/2;
    return lcm(getLCM(tree, ss, mid, 2*si+1, qs, qe), getLCM(tree, mid+1, se, 2*si+2, qs, qe));
}

void updateTree(int *tree, int ss, int se, int si, int i, int val)
{
    if(i<ss || i>se)
        return;
        
    if(ss==se)
    {
        tree[si] = val;
        return;
    }
    
    if(se>ss)
    {
        int mid = (ss+se)/2;
        updateTree(tree, ss, mid, 2*si+1, i, val);
        updateTree(tree, mid+1, se, 2*si+2, i, val);
        tree[si] = lcm(tree[2*si+1],tree[2*si+2]);
    }
}

void construct__(int *tree, int arr[], int ss, int se, int si)
{
    if(ss==se)
    {
        tree[si] = arr[ss];
        return;
    }
    
    int mid = (ss+se)/2;
    construct__(tree, arr, ss, mid, 2*si+1);
    construct__(tree, arr, mid+1, se, 2*si+2);
    tree[si] = lcm(tree[2*si+1],tree[2*si+2]);
    return;
}

int *construct(int arr[], int n)
{
    int x = (int)(ceil(log2(n)));
    
    int max_size = 2*(pow(2,x))-1;
    
    int *tree = new int[max_size];
    
    construct__(tree, arr, 0, n-1, 0);
    
    return tree;
}

int main() {
	int t;
	cin>>t;
	while(t--)
	{
	    int n,q;
	    cin>>n>>q;
	    int arr[n];
	    for(int i=0;i<n;i++)
	        cin>>arr[i];
	    
	    int *tree = construct(arr, n);
	    
	    while(q--)
	    {
	        char ch;
	        int qs, qe;
	        cin>>ch;
	        cin>>qs>>qe;
	        if(ch=='G')
	        {
	            cout<<getLCM(tree, 0, n-1, 0, qs, qe)<<endl;
	        }
	        else
	            updateTree(tree, 0, n-1, 0, qs, qe);
	    }
	    
	}
	return 0;
}