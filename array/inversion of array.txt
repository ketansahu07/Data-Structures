//https://practice.geeksforgeeks.org/problems/inversion-of-array/0/

#include <iostream>
using namespace std;
#define ll long long

ll merge(ll a[], int l, int m, int r)
{
    ll inv_count=0;
    int i,j,k;
    int n1=m-l+1;
    int n2=r-m;
    ll L[n1], R[n2];
    for(i=0;i<n1;i++)
        L[i]=a[l+i];
    for(i=0;i<n2;i++)
        R[i]=a[m+1+i];
    i=0;
    j=0;
    k=l;
    while(i<n1 && j<n2)
    {
        if(L[i]<=R[j])
            a[k++]=L[i++];
        else
        {
            a[k++]=R[j++];
            inv_count=inv_count+n1-i;
        }
    }
    while(i<n1)
    {
        a[k++]=L[i++];
    }
    while(j<n2)
    {
        a[k++]=R[j++];
    }
    return inv_count;
}

ll mergesort(ll a[], int l, int r)
{
    ll inv_count=0;
    if(l<r)
    {
        int m=l+(r-l)/2;
        inv_count+=mergesort(a,l,m);
        inv_count+=mergesort(a,m+1,r);
        inv_count+=merge(a,l,m,r);
    }
    return inv_count;
}

int main() {
	int t;
	cin>>t;
	while(t--)
	{
	    ll n;
	    cin>>n;
	    ll a[n];
	    for(ll i=0;i<n;i++)
	        cin>>a[i];
	    cout<<mergesort(a,0,n)<<endl;
	}
	return 0;
}