//https://practice.geeksforgeeks.org/problems/stock-span-problem/0

#include <iostream>
#include <stack>
using namespace std;

int main() {
	int t;
	cin>>t;
	while(t--)
	{
	    int n;
	    cin>>n;
	    int a[n];
	    for(int i=0;i<n;i++)
	        cin>>a[i];
        stack<int> s;
        s.push(0);
        cout<<1<<" ";
        for(int i=1;i<n;i++)
        {
            if(s.empty()==true)
            {
                cout<<i+1<<" ";
                s.push(i);
            }
            else if(a[i]<a[s.top()])
            {
                cout<<i-s.top()<<" ";
                s.push(i);
            }
            else
            {
                while(s.empty()!=true)
                {
                    if(a[i]>=a[s.top()])
                    {
                        s.pop();
                    }
                    else
                        break;
                }
                if(s.empty()==false)
                {
                    cout<<i-s.top()<<" ";
                    s.push(i);
                }
                else
                {
                    cout<<i+1<<" ";
                    s.push(i);
                }
            }
        }
        cout<<endl;
	}
	return 0;
}
====================================================================================
a simpler function then above
====================================================================================
void calculateSpan(int price[], int n, int S[]) 
{ 
    // Create a stack and push index of first 
    // element to it 
    stack<int> st; 
    st.push(0); 
  
    // Span value of first element is always 1 
    S[0] = 1; 
  
    // Calculate span values for rest of the elements 
    for (int i = 1; i < n; i++) { 
        // Pop elements from stack while stack is not 
        // empty and top of stack is smaller than 
        // price[i] 
        while (!st.empty() && price[st.top()] <= price[i]) 
            st.pop(); 
  
        // If stack becomes empty, then price[i] is 
        // greater than all elements on left of it, 
        // i.e., price[0], price[1], ..price[i-1].  Else 
        // price[i] is greater than elements after 
        // top of stack 
        S[i] = (st.empty()) ? (i + 1) : (i - st.top()); 
  
        // Push this element to stack 
        st.push(i); 
    } 
}
==================================================================================
practice
==================================================================================
void calculateSpan(int price[], int n, int S[])
{
   stack<int> s;
   s.push(0);
   S[0]=1;
   for(int i=1;i<n;i++)
   {
        while(s.empty()==false && price[s.top()]<=price[i])
            s.pop();
        S[i] = (s.empty())?(i+1):(i-s.top());
        s.push(i);
   }
}